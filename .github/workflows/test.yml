name: Test and Validate

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Run lint checks
        run: |
          npm run lint

      - name: Run unit tests
        run: |
          npm run test:unit

      - name: Run integration tests (including DOM loading detection)
        run: |
          npm run test:integration

      - name: Run full test suite with coverage
        run: |
          npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Run DOM loading failure detection tests
        run: |
          # Run specific tests that detect the issues we experienced
          npx jest --testNamePattern="DOM.*Loading.*Script.*Initialization"
          npx jest --testNamePattern="missing.*DOM.*elements"
          npx jest --testNamePattern="apartment.*structure.*integrity"

      - name: Validate HTML structure
        run: |
          # Enhanced HTML validation using our new tests
          node -e "
          const fs = require('fs');
          const htmlContent = fs.readFileSync('Escalas.html', 'utf8');
          
          // Critical elements that caused our original issues
          const criticalElements = [
            'id=\"scheduleContent\"',
            'id=\"scheduleInfo\"', 
            'id=\"apartmentList\"',
            'id=\"generateBtn\"',
            'id=\"downloadBtn\"',
            'id=\"startDate\"',
            'id=\"endDate\"'
          ];
          
          const missing = criticalElements.filter(element => !htmlContent.includes(element));
          
          if (missing.length > 0) {
            console.error('❌ Missing critical DOM elements:', missing);
            process.exit(1);
          }
          
          console.log('✅ All critical DOM elements present');
          
          // Validate apartment structure
          const apartmentPattern = /apartment-item.*data-apt/g;
          const apartmentMatches = htmlContent.match(apartmentPattern);
          
          if (!apartmentMatches || apartmentMatches.length !== 4) {
            console.error('❌ Expected 4 apartment items, found:', apartmentMatches?.length || 0);
            process.exit(1);
          }
          
          console.log('✅ Apartment structure validated');
          "

      - name: Test JavaScript initialization
        run: |
          # Test that all critical classes exist and can be instantiated
          node -e "
          const fs = require('fs');
          const jsContent = fs.readFileSync('index.js', 'utf8');
          
          const requiredClasses = [
            'ScheduleManager',
            'UIRenderer', 
            'ApartmentManager',
            'PDFGenerator',
            'ScheduleApp'
          ];
          
          const missing = requiredClasses.filter(className => 
            !jsContent.includes(\`class \${className}\`)
          );
          
          if (missing.length > 0) {
            console.error('❌ Missing JavaScript classes:', missing);
            process.exit(1);
          }
          
          console.log('✅ All JavaScript classes present');
          
          // Check for initialization patterns that caused issues
          if (!jsContent.includes('DOMContentLoaded')) {
            console.error('❌ Missing DOMContentLoaded listener');
            process.exit(1);
          }
          
          if (!jsContent.includes('scheduleApp')) {
            console.error('❌ Missing global app instance');
            process.exit(1);
          }
          
          console.log('✅ JavaScript initialization patterns validated');
          "

      - name: Test CSS loading
        run: |
          # Validate CSS structure and critical classes
          node -e "
          const fs = require('fs');
          const cssContent = fs.readFileSync('style.css', 'utf8');
          
          const criticalClasses = [
            '.app-container',
            '.apartment-item',
            '.apartment-list',
            '.schedule-content',
            '.order-btn',
            '.position-indicator'
          ];
          
          const missing = criticalClasses.filter(className => 
            !cssContent.includes(className)
          );
          
          if (missing.length > 0) {
            console.error('❌ Missing critical CSS classes:', missing);
            process.exit(1);
          }
          
          console.log('✅ All critical CSS classes present');
          "

      - name: Run security and performance checks
        run: |
          # Enhanced security checks
          echo "🔒 Running security and performance checks..."
          
          # Check for potential XSS vulnerabilities
          if grep -r "innerHTML.*\+" . --include="*.js"; then
            echo "⚠️  Warning: Potential XSS risk with innerHTML concatenation"
            exit 1
          fi
          
          # Check for eval usage
          if grep -r "eval(" . --include="*.js"; then
            echo "❌ Error: eval() usage detected - security risk"
            exit 1
          fi
          
          # Check for console.log in production code (excluding tests)
          if grep -r "console.log" index.js src/ 2>/dev/null | grep -v test; then
            echo "⚠️  Warning: console.log statements found in production code"
          fi
          
          echo "✅ Security checks completed"

      - name: Test build process
        run: |
          npm run build
          
          # Verify build output
          if [ ! -f "build/index.html" ]; then
            echo "❌ Build failed: index.html not generated"
            exit 1
          fi
          
          if [ ! -f "build/index.js" ]; then
            echo "❌ Build failed: index.js not copied"
            exit 1
          fi
          
          if [ ! -f "build/style.css" ]; then
            echo "❌ Build failed: style.css not copied"
            exit 1
          fi
          
          echo "✅ Build process validated"

  # New job specifically for DOM loading and script initialization tests
  dom-loading-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run DOM Loading Detection Tests
        run: |
          echo "🧪 Running DOM loading and script initialization detection tests..."
          
          # Run our specific tests that detect the issues we experienced
          npx jest tests/integration/DOMLoadingTests.test.js --verbose
          
          # Run apartment structure validation tests
          npx jest --testNamePattern="apartment.*structure.*integrity" --verbose
          
          # Run script loading detection tests
          npx jest --testNamePattern="script.*loading.*detection" --verbose

      - name: Test Error Recovery Mechanisms
        run: |
          echo "🔄 Testing error recovery and fallback mechanisms..."
          
          # Test fallback scenarios
          npx jest --testNamePattern="fallback.*error.*recovery" --verbose

  # Cross-browser compatibility testing
  browser-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          npm install --save-dev playwright @playwright/test
          npx playwright install --with-deps

      - name: Run cross-browser tests
        run: |
          # Create a comprehensive browser test
          cat > browser-test.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          const fs = require('fs');
          const path = require('path');

          test.describe('DOM Loading and App Initialization', () => {
            test('should load all critical DOM elements in Chromium', async ({ page }) => {
              await page.goto('file://' + path.resolve('./Escalas.html'));
              
              // Wait for page to load
              await page.waitForLoadState('domcontentloaded');
              
              // Test critical elements that caused our issues
              await expect(page.locator('#scheduleContent')).toBeVisible();
              await expect(page.locator('#apartmentList')).toBeVisible();
              await expect(page.locator('#generateBtn')).toBeVisible();
              await expect(page.locator('#downloadBtn')).toBeVisible();
              
              // Test apartment structure
              const apartmentItems = page.locator('.apartment-item');
              await expect(apartmentItems).toHaveCount(4);
              
              // Test that each apartment has required elements
              for (let i = 0; i < 4; i++) {
                const apartment = apartmentItems.nth(i);
                await expect(apartment.locator('.position-indicator')).toBeVisible();
                await expect(apartment.locator('input[type="checkbox"]')).toBeVisible();
                await expect(apartment.locator('.order-btn')).toHaveCount(2);
              }
            });

            test('should handle script loading correctly', async ({ page }) => {
              // Monitor console for errors
              const errors = [];
              page.on('console', msg => {
                if (msg.type() === 'error') {
                  errors.push(msg.text());
                }
              });
              
              await page.goto('file://' + path.resolve('./Escalas.html'));
              await page.waitForLoadState('domcontentloaded');
              
              // Wait for app initialization
              await page.waitForTimeout(1000);
              
              // Check for JavaScript errors
              expect(errors.length).toBe(0);
              
              // Test that global app instance exists
              const hasScheduleApp = await page.evaluate(() => {
                return typeof window.scheduleApp !== 'undefined';
              });
              
              expect(hasScheduleApp).toBe(true);
            });
          });
          EOF
          
          npx playwright test browser-test.spec.js --project=chromium