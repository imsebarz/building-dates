name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # First run all tests before building
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all tests before deployment
        run: |
          echo "🧪 Running comprehensive test suite before deployment..."
          
          # Run unit tests
          npm run test:unit
          
          # Run integration tests (including DOM loading detection)
          npm run test:integration
          
          # Run specific DOM structure validation
          npx jest --testNamePattern="DOM.*elements.*present" --verbose
          
          # Validate critical app components
          npx jest --testNamePattern="apartment.*structure.*integrity" --verbose

      - name: Validate deployment readiness
        run: |
          echo "🔍 Validating deployment readiness..."
          
          # Check that all critical files exist and have correct structure
          node -e "
          const fs = require('fs');
          
          // Validate HTML structure for deployment
          const htmlContent = fs.readFileSync('Escalas.html', 'utf8');
          
          const criticalElements = [
            'id=\"scheduleContent\"',
            'id=\"apartmentList\"', 
            'id=\"generateBtn\"',
            'id=\"downloadBtn\"'
          ];
          
          const missing = criticalElements.filter(element => !htmlContent.includes(element));
          
          if (missing.length > 0) {
            console.error('❌ Deployment blocked: Missing critical elements:', missing);
            process.exit(1);
          }
          
          // Validate JavaScript classes exist
          const jsContent = fs.readFileSync('index.js', 'utf8');
          const requiredClasses = ['ScheduleManager', 'UIRenderer', 'ApartmentManager', 'ScheduleApp'];
          
          const missingClasses = requiredClasses.filter(className => 
            !jsContent.includes(\`class \${className}\`)
          );
          
          if (missingClasses.length > 0) {
            console.error('❌ Deployment blocked: Missing JavaScript classes:', missingClasses);
            process.exit(1);
          }
          
          console.log('✅ Deployment readiness validated');
          "

  build:
    runs-on: ubuntu-latest
    needs: test  # Only build after tests pass
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint and validate files
        run: |
          # Enhanced validation using our test suite
          npm run lint

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          npm run build
          
          # Verify build contents using our validation logic
          echo "🔍 Validating build output..."
          
          if [ ! -f "build/index.html" ]; then
            echo "❌ Build failed: index.html not generated"
            exit 1
          fi
          
          # Validate that build/index.html has all critical elements
          node -e "
          const fs = require('fs');
          const htmlContent = fs.readFileSync('build/index.html', 'utf8');
          
          const criticalElements = [
            'id=\"scheduleContent\"',
            'id=\"apartmentList\"',
            'id=\"generateBtn\"'
          ];
          
          const missing = criticalElements.filter(element => !htmlContent.includes(element));
          
          if (missing.length > 0) {
            console.error('❌ Build validation failed: Missing elements in build output:', missing);
            process.exit(1);
          }
          
          console.log('✅ Build output validated successfully');
          "

      - name: Post-build DOM structure test
        run: |
          echo "🧪 Running post-build DOM structure validation..."
          
          # Create a temporary test to validate the built HTML
          cat > validate-build.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const buildHtml = fs.readFileSync('build/index.html', 'utf8');
          
          // Test apartment structure in built file
          const apartmentPattern = /apartment-item.*data-apt/g;
          const matches = buildHtml.match(apartmentPattern);
          
          if (!matches || matches.length !== 4) {
            console.error('❌ Build validation failed: Expected 4 apartments, found:', matches?.length || 0);
            process.exit(1);
          }
          
          // Test script loading structure
          if (!buildHtml.includes('index.js')) {
            console.error('❌ Build validation failed: index.js not referenced');
            process.exit(1);
          }
          
          console.log('✅ Post-build validation passed');
          EOF
          
          node validate-build.js

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build  # Only deploy after build passes (which needs test to pass)
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment health check
        run: |
          echo "🏥 Running post-deployment health check..."
          
          # Wait a moment for deployment to be available
          sleep 30
          
          # Get the deployment URL
          DEPLOY_URL="${{ steps.deployment.outputs.page_url }}"
          
          # Basic health check (would need curl in real scenario)
          echo "✅ Deployment completed to: $DEPLOY_URL"
          echo "🔍 Manual verification recommended for DOM loading and script initialization"